#!/bin/bash

# generate actual script using argbash (https://github.com/matejak/argbash)
# https://argbash.io/send_template#generator

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([hours],[H],[commit time difference in hours],[0])
# ARG_OPTIONAL_SINGLE([days],[d],[commit time difference in days],[0])
# ARG_OPTIONAL_SINGLE([message],[m],[commit message, when used with --amend leave empty to keep message as is])
# ARG_OPTIONAL_BOOLEAN([amend],[a],[apply time shift to last commit, or to specific commit using --amend-commit])
# ARG_OPTIONAL_BOOLEAN([test],[],[only test, don't actually run])
# ARGBASH_SET_DELIM([ =])
# ARG_OPTION_STACKING([getopt])
# ARG_RESTRICT_VALUES([no-local-options])
# ARG_HELP([])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


evaluate_strictness()
{
	[[ "$2" =~ ^-(-(hours|days|message|amend|test|help)$|[Hdmah]) ]] && die "You have passed '$2' as a value of argument '$1', which makes it look like that you have omitted the actual value, since '$2' is an option accepted by this script. This is considered a fatal error."
}


begins_with_short_option()
{
	local first_option all_short_options='Hdmah'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_hours="0"
_arg_days="0"
_arg_message=
_arg_amend="off"
_arg_test="off"


print_help()
{
	printf 'Usage: %s [-H|--hours <arg>] [-d|--days <arg>] [-m|--message <arg>] [-a|--(no-)amend] [--(no-)test] [-h|--help]\n' "$0"
	printf '\t%s\n' "-H, --hours: commit time difference in hours (default: '0')"
	printf '\t%s\n' "-d, --days: commit time difference in days (default: '0')"
	printf '\t%s\n' "-m, --message: commit message, when used with --amend leave empty to keep message as is (no default)"
	printf '\t%s\n' "-a, --amend, --no-amend: apply time shift to last commit, or to specific commit using --amend-commit (off by default)"
	printf '\t%s\n' "--test, --no-test: only test, don't actually run (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-H|--hours)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_hours="$2"
				shift
				evaluate_strictness "$_key" "$_arg_hours"
				;;
			--hours=*)
				_arg_hours="${_key##--hours=}"
				evaluate_strictness "$_key" "$_arg_hours"
				;;
			-H*)
				_arg_hours="${_key##-H}"
				evaluate_strictness "$_key" "$_arg_hours"
				;;
			-d|--days)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_days="$2"
				shift
				evaluate_strictness "$_key" "$_arg_days"
				;;
			--days=*)
				_arg_days="${_key##--days=}"
				evaluate_strictness "$_key" "$_arg_days"
				;;
			-d*)
				_arg_days="${_key##-d}"
				evaluate_strictness "$_key" "$_arg_days"
				;;
			-m|--message)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_message="$2"
				shift
				evaluate_strictness "$_key" "$_arg_message"
				;;
			--message=*)
				_arg_message="${_key##--message=}"
				evaluate_strictness "$_key" "$_arg_message"
				;;
			-m*)
				_arg_message="${_key##-m}"
				evaluate_strictness "$_key" "$_arg_message"
				;;
			-a|--no-amend|--amend)
				_arg_amend="on"
				test "${1:0:5}" = "--no-" && _arg_amend="off"
				;;
			-a*)
				_arg_amend="on"
				_next="${_key##-a}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-a" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			--no-test|--test)
				_arg_test="on"
				test "${1:0:5}" = "--no-" && _arg_test="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv
# if amend on
if [[ $_arg_amend == 'on' ]] ;then
    printf 'Commit will be amended\n'
    amend="--amend --no-edit"
fi

# if hours or days is not empty
if ( [[ $_arg_hours != 0 ]] || [[ $_arg_days != 0 ]] ) ;then
    if [[ $_arg_hours != 0 ]] ;then
        printf 'Commit will be %s hours shifted\n' "$_arg_hours"
    fi
    if [[ $_arg_days != 0 ]] ;then
        printf 'Commit will be %s days shifted\n' "$_arg_days"
    fi
    date=$(LC_TIME="en_US.utf8" date -d "$_arg_days days $_arg_hours hours")
    echo "date of commit will be: $date"
else
    date=$(LC_TIME="en_US.utf8" date)
fi


# amend off, but commit message is empty
if ( [[ $_arg_amend == 'off' ]] && [[ -z $_arg_message ]] ) ;then
    echo;
    echo "========================================================="
    echo "--message is required when --amend is off"
    echo "========================================================="
    echo;
    show_help=1;
fi
# commit message not empty
if [[ ! -z $_arg_message ]] ;then
    printf 'Commit message will be: %s\n' "$_arg_message"
    msg="-m \"$_arg_message\""
fi

if [[ $show_help == 1 ]];then
    echo;
    eval $0 --help
    exit 1;
fi

arg='GIT_COMMITTER_DATE="'$date'"; git commit '$amend' --date "'$date'" '$msg

if [[ $_arg_test == 'on' ]]; then
    echo "test mode"
    echo $arg
else
    eval $arg
fi


# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
